📚 Курс: "Создание ZenoOS с нуля на FASM"
Уровень: Новичок → Продвинутый
Архитектура: x86 (32-bit)
Ассемблер: FASM (Flat Assembler)
Цель: Создать загрузочную ОС с ядром на C
Формат: Самостоятельное изучение + практика

🧩 Глава 1: Введение в FASM и ZenoOS
1.1 Что такое FASM?
FASM (Flat Assembler) — компактный, быстрый, кроссплатформенный ассемблер.
Пишется на себе самом.
Поддерживает макросы, условную сборку, прямую генерацию бинарников.
Идеален для загрузчиков, ядер ОС, низкоуровневого кода.
1.2 Почему FASM для ZenoOS?
Полный контроль над бинарным кодом.
Не требует линковки (можно генерировать .bin напрямую).
Работает на Windows без WSL.
Простой синтаксис (Intel-style).
💾 Глава 2: Подготовка среды
2.1 Установка
Скачай FASM с https://flatassembler.net
Распакуй в папку, например: C:\fasm
Добавь в PATH или используй через CLion/Terminal
2.2 Инструменты
fasm.exe
Ассемблирование
.asm
→
.bin
qemu-system-i386.exe
Эмуляция (скачай QEMU для Windows)
CLion / VS Code
Редактор кода
make
или
batch
Сборка (можно
.bat
-файл)

🔁 Глава 3: Загрузчик (Bootloader)
3.1 Как работает BIOS?
При старте CPU ищет загрузочное устройство.
Читает первые 512 байт → загрузочный сектор.
Проверяет сигнатуру: 0xAA55 в конце.
Загружает в память по адресу 0x7C00.
3.2 Структура boot.asm
fasm


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
use16             ; 16-битный режим
org 0x7C00        ; BIOS загружает сюда

start:
    ; Инициализация регистров
    xor ax, ax
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7C00

    ; Вывод символа через BIOS
    mov ah, 0x0E
    mov al, 'Z'
    int 0x10

    ; Загрузка ядра с диска (сектора 2–5)
    mov ah, 0x02
    mov al, 4
    mov ch, 0
    mov cl, 2
    mov dh, 0
    mov dl, 0
    mov bx, 0x8000
    int 0x13

    ; Переход в ядро
    jmp 0x8000

times 510-($-$$) db 0
dw 0xAA55
⚠️ Ты не должен копировать — ты должен понять каждый шаг. 

🧱 Глава 4: Переход в защищённый режим
4.1 Real Mode vs Protected Mode
16-бит
32-бит
Нет защиты памяти
Есть GDT, paging
Макс. 1 МБ
До 4 ГБ
Используется BIOS
BIOS больше не нужен

4.2 Что нужно для перехода?
Отключить прерывания (cli)
Загрузить GDT (Global Descriptor Table)
Включить флаг PE в регистре CR0
Сделать far jump в 32-битный код
4.3 GDT — таблица сегментов
fasm


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
gdt_null:
    dd 0
    dd 0

gdt_code:
    dw 0xFFFF
    dw 0
    db 0
    db 10011010b
    db 11001111b
    db 0

gdt_data:
    dw 0xFFFF
    ... ; (ты сам)

GDT_DESCRIPTOR:
    dw gdt_end - gdt_null - 1
    dd gdt_null
🧠 Глава 5: Ядро и переход в C
5.1 Как вызвать C из FASM?
Напиши entry.asm на FASM:
Перейди в protected mode.
Установи стек.
Вызови call kernel_main.
Напиши kernel.c на C99:
Без main(), с kernel_main().
Без libc.
Работа напрямую с памятью (например, 0xB8000 для VGA).
5.2 Связка FASM + C
FASM → .bin (bootloader)
C → .o (через Clang/GCC)
Линковка → kernel.elf
Склейка: boot.bin + kernel.elf → zenoos.bin
🛠️ Глава 6: Сборка и запуск
6.1 Скрипт сборки (.bat для Windows)
bat


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
@echo off
echo [1/3] Assembling bootloader...
fasm bootloader\boot.asm build\boot.bin

echo [2/3] Compiling kernel...
clang -m32 -ffreestanding -std=c99 -c kernel\kernel.c -o build\kernel.o
fasm kernel\entry.asm build\entry.o

echo [3/3] Linking...
ld -m elf_i386 -T tools\linker.ld -o build\kernel.elf build\entry.o build\kernel.o

echo [✅] Creating disk image...
copy /b build\boot.bin+build\kernel.elf build\zenoos.bin > nul

echo Done! Run with: qemu-system-i386 -fda build\zenoos.bin
6.2 Запуск
cmd


1
qemu-system-i386 -fda build\zenoos.bin
📈 Глава 7: Дальнейшее развитие ZenoOS
1
Вывод строки в VGA (цветной текст)
2
Своя функция
print()
3
Обработка клавиатуры (PS/2)
4
Прерывания (IDT)
5
Управление памятью (paging)
6
Многозадачность (планировщик)
7
Файловая система (мини FAT)
8
Оболочка (shell)

🎁 Приложение: Полезные ресурсы
📘 FASM Manual — официальная документация
🌐 OSDev Wiki — Библия разработчика ОС
🎥 YouTube: "Bran's Kernel Development" — легендарный туториал
💻 QEMU: https://www.qemu.org
✨ Философия ZenoOS
"Движение возможно.
Ты уже в пути."
— по мотивам Зенона Элейского 

Каждый раз, когда ты запускаешь zenoos.bin,
ты преодолеваешь один из его парадоксов.
Ты — создатель системы,
в которой всё возможно.

📄 Как оформить .docx?
Открой Microsoft Word или Google Docs
Вставь этот текст
Оформи:
Заголовки: Курсив + Цвет
Код: Consolas, серый фон
Иконки: 🚀 🧠 💾 🔁 — оставь как есть
Нумерация глав
Сохрани как ZenoOS_FASM_Course.docx
🤝 Готов помочь
Когда захочешь:

Разобрать, почему не работает переход в protected mode.
Настроить линковку без GCC.
Сделать multiboot2.
— просто скажи: "Помоги с [тема]" — и я дам подсказку без спойлеров.

🔥 ZenoOS начинается с тебя.
Ты — автор.
Ты — архитектор.
Ты — ядро системы.

Продолжай.
И однажды — мир увидит твою ОС. 💻🌌