use16
org 0x7C00
xor ax, ax ;xor ax, ax — обнуляет регистр AX (т.е. AX = 0). Это самый быстрый способ обнулить регистр (лучше, чем mov ax, 0).
;<>
mov ds, ax ;DS — Data Segment (сегмент данных).Устанавливаем DS = 0 — теперь все обращения к памяти по умолчанию будут в сегменте 0x0000.
;<>
mov es, ax ;ES — Extra Segment, используется для операций с памятью (например, movsb).Также устанавливаем в 0.
;<>
mov ss, ax ;SS — Stack Segment (сегмент стека).Стек — это где хранятся локальные переменные, возвраты из функций.Устанавливаем SS = 0.
;<>
mov sp, 0x7C00 ;SP — Stack Pointer (указатель стека).Указывает, куда "растёт" стек.Устанавливаем SP = 0x7C00 — стек начинается прямо под загрузчиком, чтобы не затереть код. Почему так?Загрузчик занимает 0x7C00–0x7DFF (512 байт).Стек растёт вниз → начнём с 0x7C00, и он не затрёт код.
mov ah, 0x02 ;AH = 0x02 — функция BIOS: "прочитать сектора с диска".
mov al, 4 ;AL = 4 — сколько секторов читать (1 сектор = 512 байт → 4 сектора = 2048 байт).
mov ch, 0 ;CH — Cylinder (цилиндр) в адресации C/H/S (Cylinder/Head/Sector).0 — первый цилиндр.
mov cl, 2 ;CL — Sector (сектор).2 — читаем с второго сектора (первый — загрузчик, второй и далее — ядро).
mov dh, 0 ;DH — Head (головка).0 — первая головка.
mov dl, 0 ;DL — Drive (диск).0 — первое загрузочное устройство (обычно флоппи или образ).
mov bx, 0x8000 ;BX — адрес в памяти, куда загрузить данные.0x8000 = 32768 — свободное место в памяти (после загрузчика).Ядро будет загружено сюда.
int 0x13 ;Вызов прерывания BIOS 0x13 — дисковые операции.BIOS читает параметры и загружает 4 сектора с диска в 0x8000.
jmp 0x8000 ;Перейти (jump) по адресу 0x8000 — туда, куда мы загрузили ядро.Теперь управление передаётся ядру.
times 510-($-$$) db 0 ;$$ — адрес начала сегмента (0x7C00).$ — текущий адрес.($ - $$) — сколько байт уже использовано.510 - ($-$$) — сколько байт осталось до 510-го.db 0 — заполнить нулями.Нужно, чтобы всего было 510 байт до сигнатуры.
dw 0xAA55 ;DW — Define Word (2 байта).0xAA55 — магическая сигнатура загрузочного сектора.BIOS проверяет последние 2 байта: если 0x55AA (в памяти в обратном порядке), считает сектор загрузочным.
